#!/usr/bin/php -q
<?php
/* 
 * mark-finished:
 * Run from cron daily to detect petitions which have finished
 *
 * Copyright (c) 2006 UK Citizens Online Democracy. All rights reserved.
 * Email: matthew@mysociety.org. WWW: http://www.mysociety.org/
 *
 * $Id: mark-finished,v 1.13 2010-03-12 00:06:37 matthew Exp $
 *
 */

$short_opts = '';
$long_opts = array('verbose','help');

chdir(dirname($_SERVER['SCRIPT_FILENAME']));
require_once "../phplib/petcli.php";
require_once '../phplib/fns.php';
require_once '../phplib/petition.php';
require_once '../phplib/cobrand.php';
require_once '../commonlib/phplib/db.php';
require_once '../commonlib/phplib/utility.php';

function verbose($str) {
    global $verbose;
    if ($verbose) 
        fwrite(STDERR, "mark-finished: $str\n");
}
function error($str) {
    fwrite(STDERR, "mark-finished: ERROR: $str\n");
}

$switches = $options[0];
$args = $options[1];
$verbose = 0; 
foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $verbose = 1;
    if ($switch[0]=='--help') {
?>

Petitions mark finished script. This is responsible for completing
petitions. It should be run daily from cron.

Usage: mark-finished [--verbose]

--help      Display this help message
--verbose   Display more information

<?
        exit;
    }
}

function find_newly_finished_petitions() {
    global $pet_today, $memcache;

    verbose("finding newly finished petitions");
    /* Do a query before locking the table. */
    if (!db_getOne("
                select id from petition
                where '$pet_today' > deadline
                    and status = 'live'
                for update")) {
        verbose("... no newly finished petitions");
        return;
    }
        
    $q = db_query("
                select petition.*, body.ref AS body_ref from petition
                    LEFT JOIN body ON body_id=body.id
                where '$pet_today' > deadline
                    and status = 'live'
                for update of petition");
    while ($petition = db_fetch_array($q)) {
        verbose("petition #${petition['id']} (${petition['ref']}) has finished");
        db_query("update petition set status='finished', lastupdate = ms_current_timestamp()
            where id=?", $petition['id']);
        $memcache->set(OPTION_PET_DB_NAME . 'lastupdate:' . $petition['id'], time());
        stats_change('cached_petitions_finished', '+1', $petition['category'], $petition['body_ref']);
        stats_change('cached_petitions_live', '-1', $petition['category'], $petition['body_ref']);
        if (cobrand_admin_email_finished($petition['body_ref'])) {
            pet_send_message($petition['id'], MSG_ADMIN, MSG_ADMIN, 'finished', 'admin-finished-petition');
        }
    }
    db_commit();
    verbose("finished newly finished petitions");
}

function _find_timed_out_rejected_petitions($timeout, $body_ref='') {
    global $pet_timestamp, $memcache;

    $query = " where '$pet_timestamp' > laststatuschange + interval '$timeout' and status = 'rejectedonce' ";
    if ($body_ref)
        $query .= " and body.ref = '$body_ref' ";

    verbose("finding timed out rejected petitions");
    /* Do a query before locking the table. */
    if (!db_getOne("
                select petition.id from petition
                    LEFT JOIN body ON body_id=body.id
                $query for update of petition")) {
        verbose("... no timed out rejected petitions");
        return;
    }
        
    $q = db_query("
                select petition.*, body.ref AS body_ref from petition
                    LEFT JOIN body ON body_id=body.id
                $query for update of petition");
    while ($petition = db_fetch_array($q)) {
        verbose("petition #${petition['id']} (${petition['ref']}) has timed out from rejectedonce to rejected");
        db_query("update petition set status='rejected',  
            rejection_second_categories = rejection_first_categories,
            rejection_second_reason = rejection_first_reason,
            laststatuschange = ms_current_timestamp(), lastupdate = ms_current_timestamp()
            where id=?", $petition['id']);
        $q = db_query("insert into petition_log (petition_id, whenlogged, message, editor)
            values (?, ms_current_timestamp(), ?, ?)", array(
                $petition['id'],
                'Petition timed out into rejected state',
                '-'
        ));
        $memcache->set(OPTION_PET_DB_NAME . 'lastupdate:' . $petition['id'], time());
        stats_change('cached_petitions_rejected', '+1', $petition['category'], $petition['body_ref']);
        pet_send_message($petition['id'], MSG_ADMIN, MSG_CREATOR, 'rejected-timeout', 'admin-rejected-timeout');
    }
    db_commit();
    verbose("finished timed out rejected petitions");
}

function find_timed_out_rejected_petitions() {
    $timeout = cobrand_rejected_petition_timeout();
    if (is_array($timeout)) {
        _find_timed_out_rejected_petitions($timeout['other']);
        foreach ($timeout as $body_ref => $t) {
            if ($body_ref == 'other') continue;
            _find_timed_out_rejected_petitions($t, $body_ref);
        }
    } else {
        _find_timed_out_rejected_petitions($timeout);
    }
}

function find_finished_petitions_needing_admin_email() {
    global $pet_today;

    $timeout = cobrand_admin_email_post_finished();
    if (!$timeout) return;

    verbose("finding petitions needing an email");
    $q = db_query("
                select id, ref from petition
                where '$pet_today' = deadline + interval '$timeout' + interval '1 day'
                    and status = 'finished'");
    while ($petition = db_fetch_array($q)) {
        verbose("petition #${petition['id']} (${petition['ref']}) needs admin email");
        pet_send_message($petition['id'], MSG_ADMIN, MSG_ADMIN, 'finished', 'admin-post-finished-petition', array(
            'ago' => $timeout,
        ));
    }
    db_commit();
    verbose("finished sending admin emails");
}

// Main code
$memcache = new Memcache;
$memcache->connect('localhost', 11211);
find_newly_finished_petitions();
find_timed_out_rejected_petitions();
find_finished_petitions_needing_admin_email();

