#!/usr/bin/perl -w

# create-html-preview:
# Used to create government response mail (preview)
# 
# Command line arguments are type (html, plain, or email), petition URL, and
# optionally email address to send proof to.
# Pass in, as STDIN or filename in 4th argument:
# <Subject>\n\n<Initial paragraph>\n\n\n<Paragraphs of text, separated by \n\n>
# \n\n\n"Further information"\n\n
# <Paragraphs of text and links, with links specified like [URL <Text for link>]>

use strict;
use Net::SMTP;
use FindBin;
use lib "$FindBin::Bin/../perllib";
use lib "$FindBin::Bin/../commonlib/perllib";
use mySociety::Config;
BEGIN {
    mySociety::Config::set_file("$FindBin::Bin/../conf/general");
}
use Petitions::HTMLEmail;

my ($type, $url, $email) = (shift, shift, shift);
unless ($type && $url) {
    print "Usage: $0 TYPE URL [EMAIL] [FILENAME]\n";
    exit;
}
unless (!$email || $type eq 'email') {
    print STDERR "Can only supply email address when TYPE is 'email'\n";
    $email = undef;
}

my $text = join('', <>);
$text =~ s/\r//g;
my ($subject) = $text =~ /^(.*)\n+/;
$text =~ s/^$subject\n+//;
$text =~ s/\n+$//;
my $optout = mySociety::Config::get('OPTOUT_EMAIL');
$text .= "

[$url Petition information]

If you would like to opt out of receiving further mail on this or any other petitions you signed, please email [$optout]";
my $out;
if ($type eq 'html') {
    $out = Petitions::HTMLEmail::create_html($text, $subject);
} elsif ($type eq 'plain') {
    $out = Petitions::HTMLEmail::create_plain($text);
} elsif ($type eq 'email-html') {
    $out = Petitions::HTMLEmail::construct_email($text, $subject);
} elsif ($type eq 'email-plain') {
    $out = Petitions::HTMLEmail::construct_plain($text, $subject);
} else {
    die "Illegal type used!";
}
$out =~ s/\n/\r\n/g;

if ($email) {
    my $smtp = Net::SMTP->new('localhost');
    $smtp->mail($email);
    $smtp->to($email) or die "Could not set TO: $!";
    $smtp->data($out) or die "Could not send DATA: $!";
    $smtp->quit();
} else {
    print $out;
}
